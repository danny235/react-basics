{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/AddTodos.js","components/Header.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","todo","id","title","style","padding","background","borderBottom","textDecoration","isCompleted","paddingBottom","type","onChange","markComplete","bind","this","btnStyle","onClick","delTodo","color","border","borderRadius","cursor","float","Todos","console","log","todos","map","key","Component","AddTodos","state","handleChange","handleSubmit","e","setState","target","name","value","preventDefault","addTodo","form","onSubmit","input","display","outline","width","flex","backgroundColor","Header","headerStyle","linkStyle","to","textAlign","About","Fragment","App","filter","addTodos","newTodo","uuid","className","exact","path","render","component","React","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sTAGe,SAASA,EAASC,GAAQ,IAAD,EACdA,EAAMC,KAApBC,EAD4B,EAC5BA,GAAIC,EADwB,EACxBA,MAYZ,OACI,yBAAKC,MAVE,CACHC,QAAS,OACTC,WAAY,UACZC,aAAc,kBACdC,eAAiBR,EAAMC,KAAKQ,YAAc,eAAiB,SAO3D,uBAAGL,MAAO,CACNM,cAAe,QAEf,2BAAOC,KAAK,WAAWC,SAAUZ,EAAMa,aAAaC,KAAKC,KAAMb,KAC9D,IACAC,EACD,4BAAQC,MAAOY,EAAUC,QAASjB,EAAMkB,QAAQJ,KAAKC,KAAMb,IAA3D,OAMhB,IAAMc,EAAW,CACbV,WAAY,UACZa,MAAO,OACPC,OAAQ,OACRf,QAAS,UACTgB,aAAc,MACdC,OAAQ,UACRC,MAAO,SClBIC,E,4MAfXX,aAAe,WACXY,QAAQC,IAAI,U,uDAEN,IAAD,OACL,OACIX,KAAKf,MAAM2B,MAAMC,KAAI,SAAC3B,GAAD,OACjB,kBAACF,EAAD,CAAUmB,QAAS,EAAKlB,MAAMkB,QAASL,aAAc,EAAKb,MAAMa,aAAcgB,IAAK5B,EAAKC,GAAID,KAAMA,W,GAP9F6B,a,kBCDdC,E,kDACF,WAAY/B,GAAQ,IAAD,8BACf,cAAMA,IACDgC,MAAQ,CAAE7B,MAAO,IACtB,EAAK8B,aAAe,EAAKA,aAAanB,KAAlB,gBACpB,EAAKoB,aAAe,EAAKA,aAAapB,KAAlB,gBAJL,E,yDAONqB,GACTpB,KAAKqB,SAAL,eAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,QAC1CJ,EAAEK,mB,mCAGOL,GACgB,KAArBpB,KAAKiB,MAAM7B,OACXY,KAAKf,MAAMyC,QAAQ1B,KAAKiB,MAAM7B,OAGlCY,KAAKqB,SAAS,CAAEjC,MAAO,KACvBgC,EAAEK,mB,+BAIF,OACI,6BACI,0BAAMpC,MAAOsC,EAAMC,SAAU5B,KAAKmB,cAC9B,2BAAO9B,MAAOwC,EAAOhC,SAAUG,KAAKkB,aAAcK,KAAK,QAAQ3B,KAAK,OAAO4B,MAAOxB,KAAKiB,MAAM7B,QAC7F,2BAAOC,MAAOY,EAAUL,KAAK,SAAS2B,KAAK,iB,GA3BxCR,aAoCjBY,EAAO,CACTG,QAAS,QAGPD,EAAQ,CACVE,QAAS,OACT1B,OAAQ,iBACR2B,MAAO,QACP1C,QAAS,WACT2C,KAAM,MAGJhC,EAAW,CACbgC,KAAM,IACNF,QAAS,OACT1B,OAAQ,OACRf,QAAS,OACT4C,gBAAiB,OACjB9B,MAAO,QAGIY,ICxDA,SAASmB,IACpB,OACI,4BAAQ9C,MAAO+C,GACX,yCACA,kBAAC,IAAD,CAAM/C,MAAOgD,EAAWC,GAAG,eAA3B,QAFJ,MAE2D,kBAAC,IAAD,CAAMjD,MAAOgD,EAAWC,GAAG,UAA3B,UAKnE,IAAMF,EAAc,CAChBF,gBAAiB,OACjB9B,MAAO,OACPmC,UAAW,SACXjD,QAAS,UAGP+C,EAAY,CACdjC,MAAO,OACPX,eAAgB,QCHL+C,MAdf,WAEI,OAGQ,kBAAC,IAAMC,SAAP,KACI,qCACA,0F,kBCkEDC,E,kDAnEb,WAAYzD,GAAQ,IAAD,8BACjB,cAAMA,IAYRkB,QAAU,SAAChB,GACT,EAAKkC,SAAS,CACZT,MAAM,YAAK,EAAKK,MAAML,MAAM+B,QAAO,SAAAzD,GAAI,OACrCA,EAAKC,KAAOA,SAhBC,EAuBnBW,aAAe,SAACX,GACd,EAAKkC,SAAS,CACZT,MAAO,EAAKK,MAAML,MAAMC,KAAI,SAAA3B,GAK1B,OAJIA,EAAKC,KAAOA,IACdD,EAAKQ,aAAeR,EAAKQ,aAGpBR,QA5BX,EAAK+B,MAAQ,CACXL,MAAO,IAGT,EAAKgC,SAAW,EAAKA,SAAS7C,KAAd,gBAChB,EAAKD,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKI,QAAU,EAAKA,QAAQJ,KAAb,gBARE,E,qDAmCVX,GACP,IAAMyD,EAAU,CACd1D,GAAI2D,MACJ1D,MAAOA,EACPM,aAAa,GAEfM,KAAKqB,SAAS,CAAET,MAAM,GAAD,mBAAMZ,KAAKiB,MAAML,OAAjB,CAAwBiC,Q,+BAGrC,IAAD,OACP,OACE,kBAAC,IAAD,KACE,yBAAKE,UAAU,OACb,yBAAKA,UAAU,aACb,kBAACZ,EAAD,MACA,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,cAAcC,OAAQ,SAAAjE,GAAK,OAC3C,kBAAC,IAAMwD,SAAP,KACE,kBAAC,EAAD,CAAUf,QAAS,EAAKkB,WACxB,kBAAC,EAAD,CAAOzC,QAAS,EAAKA,QAASL,aAAc,EAAKA,aAAcc,MAAO,EAAKK,MAAML,YAIrF,kBAAC,IAAD,CAAOqC,KAAK,SAASE,UAAWX,W,GA1D1BY,IAAMrC,WCGJsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASR,OACP,kBAAC,IAAMS,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,c","file":"static/js/main.a5776721.chunk.js","sourcesContent":["import React from 'react';\r\nimport propTypes from 'prop-types';\r\n\r\nexport default function TodoItem(props) {\r\n    const { id, title } = props.todo;\r\n\r\n    const getStyle = () => {\r\n        return {\r\n            padding: '10px',\r\n            background: '#f4f4f4',\r\n            borderBottom: \"1px dotted #ccc\",\r\n            textDecoration : props.todo.isCompleted ? \"line-through\" : \"none\"\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={getStyle()}>\r\n            <p style={{\r\n                paddingBottom: '2px'\r\n            }}>\r\n                <input type=\"checkbox\" onChange={props.markComplete.bind(this, id)} />\r\n                {\" \"}\r\n                {title}\r\n                <button style={btnStyle} onClick={props.delTodo.bind(this, id)}>X</button>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 9px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n\r\n//PropTypes\r\nTodoItem.propTypes = {\r\n    todo: propTypes.object.isRequired\r\n}","import React, { Component } from 'react'\r\nimport TodoItem from './TodoItem'\r\n\r\nclass Todos extends Component {\r\n    markComplete = () => {\r\n        console.log('Hello')\r\n    }\r\n    render() {\r\n        return (\r\n            this.props.todos.map((todo) => (\r\n                <TodoItem delTodo={this.props.delTodo} markComplete={this.props.markComplete} key={todo.id} todo={todo} />\r\n            ))\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todos","import React, { Component } from 'react'\r\n\r\nclass AddTodos extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { title: '' };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        e.preventDefault();\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        if (this.state.title !== \"\") {\r\n            this.props.addTodo(this.state.title);\r\n        }\r\n        \r\n        this.setState({ title: '' })\r\n        e.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form style={form} onSubmit={this.handleSubmit}>\r\n                    <input style={input} onChange={this.handleChange} name=\"title\" type=\"text\" value={this.state.title} />\r\n                    <input style={btnStyle} type=\"submit\" name=\"submit\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst form = {\r\n    display: 'flex'\r\n}\r\n\r\nconst input = {\r\n    outline: 'none',\r\n    border: '1px solid #000',\r\n    width: '260px',\r\n    padding: '8px 10px',\r\n    flex: '10'\r\n}\r\n\r\nconst btnStyle = {\r\n    flex: '1',\r\n    outline: 'none',\r\n    border: 'none',\r\n    padding: '10px',\r\n    backgroundColor: '#222',\r\n    color: '#fff'\r\n}\r\n\r\nexport default AddTodos","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>Todo List</h1>\r\n            <Link style={linkStyle} to=\"/react-todo\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    backgroundColor: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px 0'\r\n}\r\n\r\nconst linkStyle = {\r\n    color: '#fff',\r\n    textDecoration: 'none'\r\n}","import React from 'react';\r\n\r\n\r\n\r\nfunction About() {\r\n  \r\n    return (\r\n        \r\n\r\n            <React.Fragment>\r\n                <h1>About</h1>\r\n                <p>This is the Todo List app v1.2.0. Built by Daniel Barima </p>\r\n            </React.Fragment>\r\n        \r\n\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Todos from './components/Todos'\nimport './App.css';\nimport AddTodos from './components/AddTodos';\nimport Header from './components/Header';\nimport About from './components/pages/About';\nimport uuid from 'react-uuid';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: []\n    };\n\n    this.addTodos = this.addTodos.bind(this);\n    this.markComplete = this.markComplete.bind(this);\n    this.delTodo = this.delTodo.bind(this);\n\n  }\n\n  // delete todo\n  delTodo = (id) => {\n    this.setState({\n      todos: [...this.state.todos.filter(todo => (\n        todo.id !== id\n      ))]\n    })\n  }\n\n\n  // Mark todo complete\n  markComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.id === id) {\n          todo.isCompleted = !todo.isCompleted;\n        }\n\n        return todo;\n      })\n    })\n  }\n\n  addTodos(title) {\n    const newTodo = {\n      id: uuid(),\n      title: title,\n      isCompleted: false\n    }\n    this.setState({ todos: [...this.state.todos, newTodo] })\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/react-todo\" render={props => (\n              <React.Fragment>\n                <AddTodos addTodo={this.addTodos} />\n                <Todos delTodo={this.delTodo} markComplete={this.markComplete} todos={this.state.todos} />\n              </React.Fragment>\n            )} />\n\n            <Route path=\"/about\" component={About} /> \n          </div>\n        </div>\n      </Router>\n\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { render } from '@testing-library/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}